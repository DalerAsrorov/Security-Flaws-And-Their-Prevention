1) The security flaw was in the path of the FrobozzCo's webpage. The attacker can easily crash the server by inputing more than cerain number of characters as can be seen in the unfixed code, approximate 1024 since the tags are also inclided in the buffer (BUFSIZE = 1024).
   To fix the flaw, I created a new variable called maxLength (=256) which holdsthe maximum number of characters that will prevent the server from crashing even if the user inputs more than required number of characters. I also using "strncat()" method which required 3 arguments, third of which was the maxLength or random integer. Since we are not absolutely sure about source buffer's size and if the source buffer contains a NULL-character terminating the string, it is more safe to using the "strncat()" method. As a result of these minor but crucial changes, the server stopped crashing and gave only error message to the user if the path contains more than required number of characters. 
   To test my demo exploit, first the server should be restarted. Open two terminals. Run the server on one terminal.  Then, while the server is running one end, on the other terminal  we should go to the directory where the exploit1.sh is, and run the exploit by the following command "./exploit1.sh". This will run the exploit, which will demonstrate how the fix works (it will print out the error message, which means that the server has not been crashed).The exploit contains operators such as wget and cat, and the payload, which were all mentioned in the tutorial.

2) 
	1) The seriousness of the breach is very high since the attacker can easily crash the server and cause loss of essential data and operations. This is not acceptable in workplace environment, especially if the whole system and database is reliant on this particular server.
	2) To fix the flaw, it is necessary to modify the code, compile the code, install and run the source files, and then  restart the server. The attacker will not be able to crash the server again, so the fix is enough to solve this particular issue. However, there might be different scenarios where the attacker can have completely different approach; hence,  developers should consider various scenarios as well when fixing the problem. 
	3) This part of the assignment shows how crucial the input side of the project is. The developer should consider a lot of scenarios to prevent buffer overflow attacks and make sure that the variables have consistent values and methods that secure smooth following of user inputs. Buffer overflow is one of those unexpected issues that devepoers must consider before the actual attack is made by hackers. 

